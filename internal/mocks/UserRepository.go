// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/ardafirdausr/posjoo-server/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, param
func (_m *UserRepository) CreateUser(ctx context.Context, param entity.CreateUserParam) (*entity.User, error) {
	ret := _m.Called(ctx, param)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateUserParam) *entity.User); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateUserParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserByID provides a mock function with given fields: ctx, userID
func (_m *UserRepository) DeleteUserByID(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UserRepository) GetUserByID(ctx context.Context, userID int64) (*entity.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByMerchantID provides a mock function with given fields: ctx, merchantID
func (_m *UserRepository) GetUsersByMerchantID(ctx context.Context, merchantID int64) ([]*entity.User, error) {
	ret := _m.Called(ctx, merchantID)

	var r0 []*entity.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entity.User); ok {
		r0 = rf(ctx, merchantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, merchantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserByID provides a mock function with given fields: ctx, userID, param
func (_m *UserRepository) UpdateUserByID(ctx context.Context, userID int64, param entity.UpdateUserParam) error {
	ret := _m.Called(ctx, userID, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.UpdateUserParam) error); ok {
		r0 = rf(ctx, userID, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPasswordByID provides a mock function with given fields: ctx, userID, password
func (_m *UserRepository) UpdateUserPasswordByID(ctx context.Context, userID int64, password string) error {
	ret := _m.Called(ctx, userID, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, userID, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPhotoByID provides a mock function with given fields: ctx, userID, url
func (_m *UserRepository) UpdateUserPhotoByID(ctx context.Context, userID int64, url string) error {
	ret := _m.Called(ctx, userID, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, userID, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
