// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	internal "github.com/ardafirdausr/posjoo-server/internal"
	entity "github.com/ardafirdausr/posjoo-server/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// GenerateAuthToken provides a mock function with given fields: ctx, user, tokenizer
func (_m *AuthUsecase) GenerateAuthToken(ctx context.Context, user entity.User, tokenizer internal.Tokenizer) (string, error) {
	ret := _m.Called(ctx, user, tokenizer)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, entity.User, internal.Tokenizer) string); ok {
		r0 = rf(ctx, user, tokenizer)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.User, internal.Tokenizer) error); ok {
		r1 = rf(ctx, user, tokenizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFromCredential provides a mock function with given fields: ctx, param
func (_m *AuthUsecase) GetUserFromCredential(ctx context.Context, param entity.LoginParam) (*entity.User, error) {
	ret := _m.Called(ctx, param)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.LoginParam) *entity.User); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.LoginParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserFromToken provides a mock function with given fields: ctx, token, tokenizer
func (_m *AuthUsecase) GetUserFromToken(ctx context.Context, token string, tokenizer internal.Tokenizer) (*entity.User, error) {
	ret := _m.Called(ctx, token, tokenizer)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, internal.Tokenizer) *entity.User); ok {
		r0 = rf(ctx, token, tokenizer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, internal.Tokenizer) error); ok {
		r1 = rf(ctx, token, tokenizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, param
func (_m *AuthUsecase) Register(ctx context.Context, param entity.RegisterParam) (*entity.User, error) {
	ret := _m.Called(ctx, param)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.RegisterParam) *entity.User); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.RegisterParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
