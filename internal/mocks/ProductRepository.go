// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/ardafirdausr/posjoo-server/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, param
func (_m *ProductRepository) CreateProduct(ctx context.Context, param entity.CreateProductParam) (*entity.Product, error) {
	ret := _m.Called(ctx, param)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateProductParam) *entity.Product); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateProductParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductByID provides a mock function with given fields: ctx, productID
func (_m *ProductRepository) DeleteProductByID(ctx context.Context, productID int64) error {
	ret := _m.Called(ctx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductByID provides a mock function with given fields: ctx, productID
func (_m *ProductRepository) GetProductByID(ctx context.Context, productID int64) (*entity.Product, error) {
	ret := _m.Called(ctx, productID)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductBySKUIndex provides a mock function with given fields: ctx, merchantID, SKU
func (_m *ProductRepository) GetProductBySKUIndex(ctx context.Context, merchantID int64, SKU string) (*entity.Product, error) {
	ret := _m.Called(ctx, merchantID, SKU)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *entity.Product); ok {
		r0 = rf(ctx, merchantID, SKU)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, merchantID, SKU)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByMerchantID provides a mock function with given fields: ctx, merchantID
func (_m *ProductRepository) GetProductsByMerchantID(ctx context.Context, merchantID int64) ([]*entity.Product, error) {
	ret := _m.Called(ctx, merchantID)

	var r0 []*entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entity.Product); ok {
		r0 = rf(ctx, merchantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, merchantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductByID provides a mock function with given fields: ctx, productID, param
func (_m *ProductRepository) UpdateProductByID(ctx context.Context, productID int64, param entity.UpdatedProductparam) error {
	ret := _m.Called(ctx, productID, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.UpdatedProductparam) error); ok {
		r0 = rf(ctx, productID, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductPhotoByID provides a mock function with given fields: ctx, productID, url
func (_m *ProductRepository) UpdateProductPhotoByID(ctx context.Context, productID int64, url string) error {
	ret := _m.Called(ctx, productID, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, productID, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
