// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/ardafirdausr/posjoo-server/internal/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, param
func (_m *ProductUsecase) CreateProduct(ctx context.Context, param entity.CreateProductParam) (*entity.Product, error) {
	ret := _m.Called(ctx, param)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, entity.CreateProductParam) *entity.Product); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.CreateProductParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, productID
func (_m *ProductUsecase) DeleteProduct(ctx context.Context, productID int64) error {
	ret := _m.Called(ctx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMerchantProducts provides a mock function with given fields: ctx, merchantID
func (_m *ProductUsecase) GetMerchantProducts(ctx context.Context, merchantID int64) ([]*entity.Product, error) {
	ret := _m.Called(ctx, merchantID)

	var r0 []*entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*entity.Product); ok {
		r0 = rf(ctx, merchantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, merchantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, productID
func (_m *ProductUsecase) GetProduct(ctx context.Context, productID int64) (*entity.Product, error) {
	ret := _m.Called(ctx, productID)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, productID, param
func (_m *ProductUsecase) UpdateProduct(ctx context.Context, productID int64, param entity.UpdatedProductparam) (*entity.Product, error) {
	ret := _m.Called(ctx, productID, param)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64, entity.UpdatedProductparam) *entity.Product); ok {
		r0 = rf(ctx, productID, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, entity.UpdatedProductparam) error); ok {
		r1 = rf(ctx, productID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductPhoto provides a mock function with given fields: ctx, productID, photo
func (_m *ProductUsecase) UpdateProductPhoto(ctx context.Context, productID int64, photo *multipart.FileHeader) (*entity.Product, error) {
	ret := _m.Called(ctx, productID, photo)

	var r0 *entity.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64, *multipart.FileHeader) *entity.Product); ok {
		r0 = rf(ctx, productID, photo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, productID, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
