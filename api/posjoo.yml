openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ardafirdausr/POSJOO/1.0.0
info:
  version: 1.0.0
  title: POS MAJOO
  description: Simple implementation of Majoo Point of Sales
  contact:
    email: ardafirdausr@gmail.com
tags:
  - name: Auth
    description: Operations for user authentication
  - name: User
    description: Operations for user
  - name: Product
    description: Operations for product
paths:
  /auth/register:
      post:
        tags:
          - Auth
        summary: Register user and the business
        operationId: register
        responses:
          '200':
            $ref: '#/components/responses/UserLogged'
          '400':
            $ref: '#/components/responses/ErrorBadRequest'
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login using email and password
      operationId: login
      responses:
        '200':
          $ref: '#/components/responses/UserLogged'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
  /users:
    get:
      tags:
        - Product
      summary: Get all users
      operationId: getAllProducts
      description: |
        Only accessable by logged user
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/ProductList'
    post:
      tags:
        - Product
      summary: Create new user
      description: |
        Only accessable by logged user
      operationId: createProduct
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateProduct'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '500':
          $ref: '#/components/responses/ErrorInternalServer'
  /users/{userId}:
    put:
      tags:
        - Product
      summary: Update a user
      description: |
        Only accessable by logged user
      operationId: updateProduct
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: The ID of user to be delete.
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateProduct'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternalServer'
    delete:
      tags:
        - Product
      summary: Delete a user
      description: |
        Only accessable by logged user
      operationId: deleteProduct
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: The ID of user to be delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'No Content'
        '404':
          $ref: '#/components/responses/ErrorNotFound'
        '500':
          $ref: '#/components/responses/ErrorInternalServer'
  /products:
    get:
      tags:
        - Product
      summary: Get all products
      operationId: getAllProducts
      description: |
        Only accessable by logged user
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/ProductList'
    post:
      tags:
        - Product
      summary: Create new product
      description: |
        Only accessable by logged user
      operationId: createProduct
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CreateProduct'
      responses:
        '200':
          $ref: '#/components/responses/Product'
        '400':
          $ref: '#/components/responses/ErrorBadRequest'
        '500':
          $ref: '#/components/responses/ErrorInternalServer'
  /products/{productId}:
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: int
          example: 90
        name:
          type: string
          example: 'Arda'
        email:
          type: string
          example: 'arda@mail.com'
        photo_url:
          type: string
          example: 'https://image.com/john-doe.jpg'
        role:
          type: string
          enum: ['owner', 'manager', 'staff']
          example: 'manager'
        merchant_id:
          type: int
          example: 2
        created_at:
          type: string
          format: data
        updated_at:
          type: string
          format: data
    Product:
      type: object
      properties:
        id:
          type: int
          example: 90
        name:
          type: string
          example: 'Sepatu Hitam'
        sku:
          type: string
          example: 'spt-htm'
        photo_url:
          type: string
          example: 'https://image.com/spt-htm.jpg'
        merchant_id:
          type: int
          example: 2
        created_at:
          type: string
          format: data
        updated_at:
  requestBodies:
    Login:
      description: User SSO payload
      content:
        application/json:
          schema:
            type: object
            required:
            - task
            properties:
              task:
                type: string
                minLength: 0
                maxLength: 50
    CreateProduct:
      description: new product data
      content:
        application/json:
          schema:
            type: object
            required:
            - task
            properties:
              task:
                type: string
                minLength: 0
                maxLength: 50
    UpdateProduct:
      description: new product data
      content:
        application/json:
          schema:
            type: object
            properties:
              task:
                type: string
                minLength: 0
                maxLength: 50
              completed:
                type: boolean
  responses:
    ErrorBadRequest:
      description: Bad request data.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Data not found'
    ErrorUnauthorized:
      description: The Request is unautorized.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Data not found'
    ErrorForbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden request'
    ErrorNotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Data not found'
    ErrorInternalServer:
      description: Internal Error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Internal server error'
    UserLogged:
      description: User crendential and information
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: '#/components/schemas/User'
              token:
                type: string
    ProductList:
      description: List of products
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    Product:
      description: The product
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              data:
                $ref: '#/components/schemas/Product'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT